name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      dotnet_version:
        required: false
        type: string
        default: "9.x"
      sonar_cloud_organization:
        required: false
        type: string
        default: "xhaguatende-01"
      sonar_cloud_project_key:
        required: true
        type: string
      sonar_coverage_exclusions:
        required: false
        type: string
        default: "**Test*.cs,**Program.cs"
      sonar_exclusions:
        required: false
        type: string
        default: "**Program.cs"
      publish_project:
        required: true
        type: string
      docker_file:
        required: true
        type: string
      docker_hub_repository:
        required: true
        type: string
      docker_image_title:
        required: false
        type: string
        default: "N/A"
      docker_image_description:
        required: false
        type: string
        default: "N/A"

env:
  BUILD_CONFIGURATION: "Release"

defaults:
  run:
    working-directory: ./src

# Ensures only one execution per branch will run at a time.
concurrency:
  group: ${{ github.ref }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: "17" # Set up Java 17, because SonarCloud requires it
          distribution: "adopt"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.0
        with:
          versionSpec: "6.0.x"

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/execute@v3.1.0
        id: gitversion

      - name: Show FullSemVer
        uses: gittools/actions/gitversion/command@v3.1.0
        with:
          arguments: "/showvariable FullSemVer"

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Restore NuGet Packages
        run: |
          echo "dotnet restore"
          dotnet restore

      - name: Cache .NET Core packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Install SonarCloud
        run: |
          echo "dotnet tool install --global dotnet-sonarscanner"
          dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarCloud Scan
        run: |
          dotnet sonarscanner begin /o:"${{ inputs.sonar_cloud_organization }}" \
                                  /k:"${{ inputs.sonar_cloud_project_key }}" \
                                  /v:"${{ steps.gitversion.outputs.fullSemVer }}" \
                                  /d:sonar.host.url="${{ secrets.SONAR_CLOUD_URL }}" \
                                  /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
                                  /d:sonar.cs.opencover.reportsPaths=./CoverageResults/coverage.opencover.xml \
                                  /d:sonar.coverage.exclusions=${{inputs.sonar_coverage_exclusions}} \
                                  /d:sonar.exclusions=${{inputs.sonar_exclusions}} \
                                  /d:sonar.qualitygate.wait=true

      - name: Build Solution
        run: |
          echo "dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} -p:GeneratePackageOnBuild=false"
          dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} -p:GeneratePackageOnBuild=false

      - name: Test Solution
        run: |
          dotnet test --no-restore --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} \
                  /p:CollectCoverage=true \
                  /p:CoverletOutput=../CoverageResults/ \
                  /p:MergeWith="../CoverageResults/coverage.json" \
                  /p:CoverletOutputFormat=\"opencover,json\" \
                  -m:1

      - name: End SonarCloud Scan
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish App
        run: |
          dotnet publish ${{inputs.publish_project}} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --output ./../output/

      - name: Login to Docker Hub Registry
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build and Push Image to Docker Hub Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{inputs.docker_file}}
          push: true
          tags: |
            ${{secrets.DOCKERHUB_USERNAME}}/${{inputs.docker_hub_repository}}:${{ steps.gitversion.outputs.fullSemVer }}
            ${{secrets.DOCKERHUB_USERNAME}}/${{inputs.docker_hub_repository}}:latest
          labels: |
            org.opencontainers.image.created={{date 'rfc3339'}}
            org.opencontainers.image.version=${{ steps.gitversion.outputs.fullSemVer }}
            org.opencontainers.image.title=${{inputs.docker_image_title}}
            org.opencontainers.image.description=${{inputs.docker_image_description}}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            SOURCE_FOLDER=../output/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion.outputs.fullSemVer }}
          release_name: Release ${{ steps.gitversion.outputs.fullSemVer }}
